= Rust で ffi で FUSE ライブラリを自作する


== はじめに

Rust は FireFox などの開発元としてよく知られる Mozilla が開発しているモダンな言語です。
モダンな言語だけあって、最近台頭してきた言語によくあるような、パターンマッチや null 安全な型(Option)、エラーが起こるかもしれないことを表現する型(Result) などの機能が存在します。
また Rust の特徴的な機能として、デフォルトムーブな変数所有権の扱いや借用、コンパイル時のレースコンディションのチェック、変数のライフタイムの管理、シンプルな ffi による C, C++ 関数の呼び出し、unsafe ブロックによる柔軟で明示的な危険な操作(ポインタのデリファレンスや C, C++関数呼び出しなど)も存在します。
これらの機能により、 C, C++ などより安全にシステムプログラミングが可能であり、かつ既存の C, C++ の資産を利用可能なプログラミング言語であると言えます。

本記事では Rust でffi するコードを書いてみます。
ここでは FUSE(Filesystem in UserSpace) のライブラリである libfuse のハイレベル API のラッパーライブラリを作ってみます。


== FUSE(Filesystem in UserSpace)  について

FUSE はユーザスペースで気軽に独自のファイルシステムを動作させるための仕組みです。
...
libfuse にはハイレベル API とローレベル API が存在します。

=== CではじめるFUSE


== RUST でやるFUSE

=== そもそものコンセプト

==== 既存の Rust FUSE ライブラリについて

そういえば Rust で FUSE を扱うための既存ライブラリは無いのでしょうか？
実はちょうどそれに当たる https://github.com/zargony/rust-fuse が存在します。
しかしながら rust-fuse はローレベル API だけをターゲットにしており、より抽象化されているハイレベル API を Rust から使用する手段は今の所ありません。
rust-fuse としては、 C 実装のハイレベル API を直接呼び出すよりはローレベル API を利用するハイレベル API を Rust で実装するほうが Rust の良さを活かせるため、やるならそうすべきとの構想があるようです。

==== 今回自作する Rust FUSE ライブラリ

一方で今回は libfuse で持っているハイレベル API の C 実装を素直に Rust から呼び出すことに注力します。
ウェブでよく散見される libfuse を用いたファイルシステムの実装はハイレベル API を前提にしているものが多く、 libfuse 公式のサンプルコードもハイレベル API を利用していることから、ハイレベル API を Rust 向けに提供することに一定の価値があるものと思われます。

今回の Rust FUSE ライブラリは rust-fuse と親しい機能を持ちながらハイレベル API に対する着想が異なることから、 yarf(Yet Another Rust Fuse) と名付けます。

=== Rust でやる ffi

さて、 Rust でそもそもどのように C の関数を扱うことができるのでしょうか？

=== yarf の実装の流れ

Rust の ffi を使ったライブラリの実装パターンとして、よく C, C++ の ffi のための記述だけ分離した sys crate とそれを用いて Rust らしいなるべく安全なインタフェースを提供する crate という二段構えがとられます。
yarf でもそれに従い、 FUSE ハイレベル API を扱うことに注力する yarf-sys crate とそれを用いて FUSE の各コールバック関数を trait として取り扱ったりなるべく unsafe ブロックを記述しなくて済むようにした yarf crate を作る事にします。

==== yarf-sys はじめの一歩

==== bindgen の利用

==== サンプルコードの記述

ここまで来れば最低限 Rust から FUSE ハイレベル API が扱えるようになっているはずです。
yarf crate の開発に着手する前に折角ですので、 yarf-sys crate で hello サンプルコードを実装してみます。
記述する処理は基本的に C のサンプルと同様になります。

==== yarf crate の実装

==== サンプルコードの記述

== 反省点や知見など

== まとめ

